name: Deploy to Production

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:

concurrency:
  group: production-deploy
  cancel-in-progress: false

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  security-check:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Lint codebase
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

      - name: Build application
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
        run: pnpm build

  database-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: security-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate database schema
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          supabase db diff --schema public

  deploy-preview:
    name: Deploy Preview & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security-check, database-check]
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Preview)
        id: deploy
        run: |
          url=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Preview URL: $url"

      - name: Run E2E tests against preview
        env:
          PREVIEW_URL: ${{ steps.deploy.outputs.url }}
        run: |
          # Wait for deployment to be ready
          sleep 30
          curl -f "$PREVIEW_URL/api/monitoring/health" || exit 1
          echo "Preview deployment health check passed"

  security-test:
    name: Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: deploy-preview
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security scan with ZAP
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ needs.deploy-preview.outputs.preview-url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Test security headers
        env:
          PREVIEW_URL: ${{ needs.deploy-preview.outputs.preview-url }}
        run: |
          response=$(curl -s -I "$PREVIEW_URL")
          echo "$response" | grep -i "x-frame-options: DENY" || exit 1
          echo "$response" | grep -i "x-content-type-options: nosniff" || exit 1
          echo "$response" | grep -i "content-security-policy" || exit 1
          echo "Security headers validation passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-preview, security-test]
    environment:
      name: production
      url: https://substack-intelligence.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Production
        id: deploy-prod
        run: |
          url=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Production URL: $url"

      - name: Verify production deployment
        env:
          PRODUCTION_URL: https://substack-intelligence.vercel.app
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Health check
          curl -f "$PRODUCTION_URL/api/monitoring/health" || exit 1
          
          # Security headers check
          response=$(curl -s -I "$PRODUCTION_URL")
          echo "$response" | grep -i "strict-transport-security" || exit 1
          
          echo "Production deployment verification passed"

      - name: Trigger post-deployment tasks
        env:
          PRODUCTION_URL: https://substack-intelligence.vercel.app
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
        run: |
          # Trigger security audit
          curl -X POST "$PRODUCTION_URL/api/cron/security-audit" \
            -H "Authorization: Bearer $CRON_SECRET" \
            || echo "Security audit trigger failed (non-critical)"
          
          echo "Post-deployment tasks completed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "URL: https://substack-intelligence.vercel.app"
          echo "Health: https://substack-intelligence.vercel.app/health"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Check the logs above for details."
          exit 1

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-production]
    
    steps:
      - name: Clean up preview deployments
        run: |
          # This would clean up old preview deployments
          # Implementation depends on your cleanup strategy
          echo "Cleanup completed"